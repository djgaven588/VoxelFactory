#version 410 core

/* This comes interpolated from the vertex shader */
in vec2 texcoord;

/* The fragment color */
out vec4 color;

/* The texture we are going to sample */
//uniform sampler2D tex;
uniform mat4 _CameraToWorld;
uniform mat4 _CameraInverseProjection;

struct Ray
{
    vec3 origin;
    vec3 direction;
};

Ray CreateCameraRay(vec2 uv)
{
    vec3 origin = (_CameraToWorld * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    Ray ray;
    ray.origin = origin;

    vec4 clipSpacePosition = vec4(uv * 2.0 - 1.0, 1.0, 1.0);
    vec4 far = _CameraInverseProjection * clipSpacePosition;
    far /= far.w;

    ray.direction = normalize(far.xyz - ray.origin);
    return ray;
}

void main(void) {
  /* Well, simply sample the texture */
  //color = texture(tex, texcoord);

  Ray ray = CreateCameraRay(texcoord);

  color = /*vec4((ray.direction + vec3(1,1,1)) / 2, 1)*/ + vec4(texcoord, 0, 1);
  return;

  vec4 result = vec4(0, 0, 0, 1);
    for (float dist = 0; dist < 20; dist += 0.1f)
    {
        vec3 currentPos = ray.origin + ray.direction * dist;
        if (currentPos.y < 0)
        {
            float distFade = 1 - dist / 20.0f;
            result = vec4(distFade, distFade, distFade, 1);
            break;
        }
    }

    color = result;
}
