#version 430 core

in vec2 texcoord;

out vec4 color;

uniform mat4 _CameraToWorld;
uniform mat4 _CameraInverseProjection;

struct Ray
{
    vec3 origin;
    vec3 direction;
};

Ray CreateCameraRay(vec2 uv)
{
    vec3 origin = (_CameraToWorld * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    Ray ray;

    vec4 clipSpacePosition = vec4(uv * 2.0 - 1.0, 1.0, 1.0);
    vec4 far = _CameraInverseProjection * clipSpacePosition;
    far /= far.w;

    ray.origin = origin;
    ray.direction = normalize(far.xyz - ray.origin);
    return ray;
}

void main(void)
{
    Ray ray = CreateCameraRay(texcoord);

    color = vec4((ray.direction + vec3(1,1,1)) / 2, 1);
    //color = vec4(texcoord, 0, 1);
    float distance = 0;
    while(distance < 20)
    {
        if((ray.origin + ray.direction * distance).y < 0)
        {
            float val = distance / 20.0;
            color = vec4(val, val, val, 1);
        }

        distance += 0.1;
    }
}
